#!/usr/bin/python
# -*- coding: utf-8 -*-
# ====================================================================
# @author: Joe Del Rocco
# @since: 02/09/2018
# @summary: A module which wraps NREL's SPA (solar position algorithm)
# https://midcdmz.nrel.gov/spa/
# ====================================================================

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spa')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spa')
    _spa = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spa', [dirname(__file__)])
        except ImportError:
            import _spa
            return _spa
        try:
            _mod = imp.load_module('_spa', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spa = swig_import_helper()
    del swig_import_helper
else:
    import _spa
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    #import __builtin__
    pass

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SPA_ZA = _spa.SPA_ZA
SPA_ZA_INC = _spa.SPA_ZA_INC
SPA_ZA_RTS = _spa.SPA_ZA_RTS
SPA_ALL = _spa.SPA_ALL
class spa_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spa_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spa_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["year"] = _spa.spa_data_year_set
    __swig_getmethods__["year"] = _spa.spa_data_year_get
    if _newclass:
        year = _swig_property(_spa.spa_data_year_get, _spa.spa_data_year_set)
    __swig_setmethods__["month"] = _spa.spa_data_month_set
    __swig_getmethods__["month"] = _spa.spa_data_month_get
    if _newclass:
        month = _swig_property(_spa.spa_data_month_get, _spa.spa_data_month_set)
    __swig_setmethods__["day"] = _spa.spa_data_day_set
    __swig_getmethods__["day"] = _spa.spa_data_day_get
    if _newclass:
        day = _swig_property(_spa.spa_data_day_get, _spa.spa_data_day_set)
    __swig_setmethods__["hour"] = _spa.spa_data_hour_set
    __swig_getmethods__["hour"] = _spa.spa_data_hour_get
    if _newclass:
        hour = _swig_property(_spa.spa_data_hour_get, _spa.spa_data_hour_set)
    __swig_setmethods__["minute"] = _spa.spa_data_minute_set
    __swig_getmethods__["minute"] = _spa.spa_data_minute_get
    if _newclass:
        minute = _swig_property(_spa.spa_data_minute_get, _spa.spa_data_minute_set)
    __swig_setmethods__["second"] = _spa.spa_data_second_set
    __swig_getmethods__["second"] = _spa.spa_data_second_get
    if _newclass:
        second = _swig_property(_spa.spa_data_second_get, _spa.spa_data_second_set)
    __swig_setmethods__["delta_ut1"] = _spa.spa_data_delta_ut1_set
    __swig_getmethods__["delta_ut1"] = _spa.spa_data_delta_ut1_get
    if _newclass:
        delta_ut1 = _swig_property(_spa.spa_data_delta_ut1_get, _spa.spa_data_delta_ut1_set)
    __swig_setmethods__["delta_t"] = _spa.spa_data_delta_t_set
    __swig_getmethods__["delta_t"] = _spa.spa_data_delta_t_get
    if _newclass:
        delta_t = _swig_property(_spa.spa_data_delta_t_get, _spa.spa_data_delta_t_set)
    __swig_setmethods__["time_zone"] = _spa.spa_data_time_zone_set
    __swig_getmethods__["time_zone"] = _spa.spa_data_time_zone_get
    if _newclass:
        time_zone = _swig_property(_spa.spa_data_time_zone_get, _spa.spa_data_time_zone_set)
    __swig_setmethods__["longitude"] = _spa.spa_data_longitude_set
    __swig_getmethods__["longitude"] = _spa.spa_data_longitude_get
    if _newclass:
        longitude = _swig_property(_spa.spa_data_longitude_get, _spa.spa_data_longitude_set)
    __swig_setmethods__["latitude"] = _spa.spa_data_latitude_set
    __swig_getmethods__["latitude"] = _spa.spa_data_latitude_get
    if _newclass:
        latitude = _swig_property(_spa.spa_data_latitude_get, _spa.spa_data_latitude_set)
    __swig_setmethods__["elevation"] = _spa.spa_data_elevation_set
    __swig_getmethods__["elevation"] = _spa.spa_data_elevation_get
    if _newclass:
        elevation = _swig_property(_spa.spa_data_elevation_get, _spa.spa_data_elevation_set)
    __swig_setmethods__["pressure"] = _spa.spa_data_pressure_set
    __swig_getmethods__["pressure"] = _spa.spa_data_pressure_get
    if _newclass:
        pressure = _swig_property(_spa.spa_data_pressure_get, _spa.spa_data_pressure_set)
    __swig_setmethods__["temperature"] = _spa.spa_data_temperature_set
    __swig_getmethods__["temperature"] = _spa.spa_data_temperature_get
    if _newclass:
        temperature = _swig_property(_spa.spa_data_temperature_get, _spa.spa_data_temperature_set)
    __swig_setmethods__["slope"] = _spa.spa_data_slope_set
    __swig_getmethods__["slope"] = _spa.spa_data_slope_get
    if _newclass:
        slope = _swig_property(_spa.spa_data_slope_get, _spa.spa_data_slope_set)
    __swig_setmethods__["azm_rotation"] = _spa.spa_data_azm_rotation_set
    __swig_getmethods__["azm_rotation"] = _spa.spa_data_azm_rotation_get
    if _newclass:
        azm_rotation = _swig_property(_spa.spa_data_azm_rotation_get, _spa.spa_data_azm_rotation_set)
    __swig_setmethods__["atmos_refract"] = _spa.spa_data_atmos_refract_set
    __swig_getmethods__["atmos_refract"] = _spa.spa_data_atmos_refract_get
    if _newclass:
        atmos_refract = _swig_property(_spa.spa_data_atmos_refract_get, _spa.spa_data_atmos_refract_set)
    __swig_setmethods__["function"] = _spa.spa_data_function_set
    __swig_getmethods__["function"] = _spa.spa_data_function_get
    if _newclass:
        function = _swig_property(_spa.spa_data_function_get, _spa.spa_data_function_set)
    __swig_setmethods__["jd"] = _spa.spa_data_jd_set
    __swig_getmethods__["jd"] = _spa.spa_data_jd_get
    if _newclass:
        jd = _swig_property(_spa.spa_data_jd_get, _spa.spa_data_jd_set)
    __swig_setmethods__["jc"] = _spa.spa_data_jc_set
    __swig_getmethods__["jc"] = _spa.spa_data_jc_get
    if _newclass:
        jc = _swig_property(_spa.spa_data_jc_get, _spa.spa_data_jc_set)
    __swig_setmethods__["jde"] = _spa.spa_data_jde_set
    __swig_getmethods__["jde"] = _spa.spa_data_jde_get
    if _newclass:
        jde = _swig_property(_spa.spa_data_jde_get, _spa.spa_data_jde_set)
    __swig_setmethods__["jce"] = _spa.spa_data_jce_set
    __swig_getmethods__["jce"] = _spa.spa_data_jce_get
    if _newclass:
        jce = _swig_property(_spa.spa_data_jce_get, _spa.spa_data_jce_set)
    __swig_setmethods__["jme"] = _spa.spa_data_jme_set
    __swig_getmethods__["jme"] = _spa.spa_data_jme_get
    if _newclass:
        jme = _swig_property(_spa.spa_data_jme_get, _spa.spa_data_jme_set)
    __swig_setmethods__["l"] = _spa.spa_data_l_set
    __swig_getmethods__["l"] = _spa.spa_data_l_get
    if _newclass:
        l = _swig_property(_spa.spa_data_l_get, _spa.spa_data_l_set)
    __swig_setmethods__["b"] = _spa.spa_data_b_set
    __swig_getmethods__["b"] = _spa.spa_data_b_get
    if _newclass:
        b = _swig_property(_spa.spa_data_b_get, _spa.spa_data_b_set)
    __swig_setmethods__["r"] = _spa.spa_data_r_set
    __swig_getmethods__["r"] = _spa.spa_data_r_get
    if _newclass:
        r = _swig_property(_spa.spa_data_r_get, _spa.spa_data_r_set)
    __swig_setmethods__["theta"] = _spa.spa_data_theta_set
    __swig_getmethods__["theta"] = _spa.spa_data_theta_get
    if _newclass:
        theta = _swig_property(_spa.spa_data_theta_get, _spa.spa_data_theta_set)
    __swig_setmethods__["beta"] = _spa.spa_data_beta_set
    __swig_getmethods__["beta"] = _spa.spa_data_beta_get
    if _newclass:
        beta = _swig_property(_spa.spa_data_beta_get, _spa.spa_data_beta_set)
    __swig_setmethods__["x0"] = _spa.spa_data_x0_set
    __swig_getmethods__["x0"] = _spa.spa_data_x0_get
    if _newclass:
        x0 = _swig_property(_spa.spa_data_x0_get, _spa.spa_data_x0_set)
    __swig_setmethods__["x1"] = _spa.spa_data_x1_set
    __swig_getmethods__["x1"] = _spa.spa_data_x1_get
    if _newclass:
        x1 = _swig_property(_spa.spa_data_x1_get, _spa.spa_data_x1_set)
    __swig_setmethods__["x2"] = _spa.spa_data_x2_set
    __swig_getmethods__["x2"] = _spa.spa_data_x2_get
    if _newclass:
        x2 = _swig_property(_spa.spa_data_x2_get, _spa.spa_data_x2_set)
    __swig_setmethods__["x3"] = _spa.spa_data_x3_set
    __swig_getmethods__["x3"] = _spa.spa_data_x3_get
    if _newclass:
        x3 = _swig_property(_spa.spa_data_x3_get, _spa.spa_data_x3_set)
    __swig_setmethods__["x4"] = _spa.spa_data_x4_set
    __swig_getmethods__["x4"] = _spa.spa_data_x4_get
    if _newclass:
        x4 = _swig_property(_spa.spa_data_x4_get, _spa.spa_data_x4_set)
    __swig_setmethods__["del_psi"] = _spa.spa_data_del_psi_set
    __swig_getmethods__["del_psi"] = _spa.spa_data_del_psi_get
    if _newclass:
        del_psi = _swig_property(_spa.spa_data_del_psi_get, _spa.spa_data_del_psi_set)
    __swig_setmethods__["del_epsilon"] = _spa.spa_data_del_epsilon_set
    __swig_getmethods__["del_epsilon"] = _spa.spa_data_del_epsilon_get
    if _newclass:
        del_epsilon = _swig_property(_spa.spa_data_del_epsilon_get, _spa.spa_data_del_epsilon_set)
    __swig_setmethods__["epsilon0"] = _spa.spa_data_epsilon0_set
    __swig_getmethods__["epsilon0"] = _spa.spa_data_epsilon0_get
    if _newclass:
        epsilon0 = _swig_property(_spa.spa_data_epsilon0_get, _spa.spa_data_epsilon0_set)
    __swig_setmethods__["epsilon"] = _spa.spa_data_epsilon_set
    __swig_getmethods__["epsilon"] = _spa.spa_data_epsilon_get
    if _newclass:
        epsilon = _swig_property(_spa.spa_data_epsilon_get, _spa.spa_data_epsilon_set)
    __swig_setmethods__["del_tau"] = _spa.spa_data_del_tau_set
    __swig_getmethods__["del_tau"] = _spa.spa_data_del_tau_get
    if _newclass:
        del_tau = _swig_property(_spa.spa_data_del_tau_get, _spa.spa_data_del_tau_set)
    __swig_setmethods__["lamda"] = _spa.spa_data_lamda_set
    __swig_getmethods__["lamda"] = _spa.spa_data_lamda_get
    if _newclass:
        lamda = _swig_property(_spa.spa_data_lamda_get, _spa.spa_data_lamda_set)
    __swig_setmethods__["nu0"] = _spa.spa_data_nu0_set
    __swig_getmethods__["nu0"] = _spa.spa_data_nu0_get
    if _newclass:
        nu0 = _swig_property(_spa.spa_data_nu0_get, _spa.spa_data_nu0_set)
    __swig_setmethods__["nu"] = _spa.spa_data_nu_set
    __swig_getmethods__["nu"] = _spa.spa_data_nu_get
    if _newclass:
        nu = _swig_property(_spa.spa_data_nu_get, _spa.spa_data_nu_set)
    __swig_setmethods__["alpha"] = _spa.spa_data_alpha_set
    __swig_getmethods__["alpha"] = _spa.spa_data_alpha_get
    if _newclass:
        alpha = _swig_property(_spa.spa_data_alpha_get, _spa.spa_data_alpha_set)
    __swig_setmethods__["delta"] = _spa.spa_data_delta_set
    __swig_getmethods__["delta"] = _spa.spa_data_delta_get
    if _newclass:
        delta = _swig_property(_spa.spa_data_delta_get, _spa.spa_data_delta_set)
    __swig_setmethods__["h"] = _spa.spa_data_h_set
    __swig_getmethods__["h"] = _spa.spa_data_h_get
    if _newclass:
        h = _swig_property(_spa.spa_data_h_get, _spa.spa_data_h_set)
    __swig_setmethods__["xi"] = _spa.spa_data_xi_set
    __swig_getmethods__["xi"] = _spa.spa_data_xi_get
    if _newclass:
        xi = _swig_property(_spa.spa_data_xi_get, _spa.spa_data_xi_set)
    __swig_setmethods__["del_alpha"] = _spa.spa_data_del_alpha_set
    __swig_getmethods__["del_alpha"] = _spa.spa_data_del_alpha_get
    if _newclass:
        del_alpha = _swig_property(_spa.spa_data_del_alpha_get, _spa.spa_data_del_alpha_set)
    __swig_setmethods__["delta_prime"] = _spa.spa_data_delta_prime_set
    __swig_getmethods__["delta_prime"] = _spa.spa_data_delta_prime_get
    if _newclass:
        delta_prime = _swig_property(_spa.spa_data_delta_prime_get, _spa.spa_data_delta_prime_set)
    __swig_setmethods__["alpha_prime"] = _spa.spa_data_alpha_prime_set
    __swig_getmethods__["alpha_prime"] = _spa.spa_data_alpha_prime_get
    if _newclass:
        alpha_prime = _swig_property(_spa.spa_data_alpha_prime_get, _spa.spa_data_alpha_prime_set)
    __swig_setmethods__["h_prime"] = _spa.spa_data_h_prime_set
    __swig_getmethods__["h_prime"] = _spa.spa_data_h_prime_get
    if _newclass:
        h_prime = _swig_property(_spa.spa_data_h_prime_get, _spa.spa_data_h_prime_set)
    __swig_setmethods__["e0"] = _spa.spa_data_e0_set
    __swig_getmethods__["e0"] = _spa.spa_data_e0_get
    if _newclass:
        e0 = _swig_property(_spa.spa_data_e0_get, _spa.spa_data_e0_set)
    __swig_setmethods__["del_e"] = _spa.spa_data_del_e_set
    __swig_getmethods__["del_e"] = _spa.spa_data_del_e_get
    if _newclass:
        del_e = _swig_property(_spa.spa_data_del_e_get, _spa.spa_data_del_e_set)
    __swig_setmethods__["e"] = _spa.spa_data_e_set
    __swig_getmethods__["e"] = _spa.spa_data_e_get
    if _newclass:
        e = _swig_property(_spa.spa_data_e_get, _spa.spa_data_e_set)
    __swig_setmethods__["eot"] = _spa.spa_data_eot_set
    __swig_getmethods__["eot"] = _spa.spa_data_eot_get
    if _newclass:
        eot = _swig_property(_spa.spa_data_eot_get, _spa.spa_data_eot_set)
    __swig_setmethods__["srha"] = _spa.spa_data_srha_set
    __swig_getmethods__["srha"] = _spa.spa_data_srha_get
    if _newclass:
        srha = _swig_property(_spa.spa_data_srha_get, _spa.spa_data_srha_set)
    __swig_setmethods__["ssha"] = _spa.spa_data_ssha_set
    __swig_getmethods__["ssha"] = _spa.spa_data_ssha_get
    if _newclass:
        ssha = _swig_property(_spa.spa_data_ssha_get, _spa.spa_data_ssha_set)
    __swig_setmethods__["sta"] = _spa.spa_data_sta_set
    __swig_getmethods__["sta"] = _spa.spa_data_sta_get
    if _newclass:
        sta = _swig_property(_spa.spa_data_sta_get, _spa.spa_data_sta_set)
    __swig_setmethods__["zenith"] = _spa.spa_data_zenith_set
    __swig_getmethods__["zenith"] = _spa.spa_data_zenith_get
    if _newclass:
        zenith = _swig_property(_spa.spa_data_zenith_get, _spa.spa_data_zenith_set)
    __swig_setmethods__["azimuth_astro"] = _spa.spa_data_azimuth_astro_set
    __swig_getmethods__["azimuth_astro"] = _spa.spa_data_azimuth_astro_get
    if _newclass:
        azimuth_astro = _swig_property(_spa.spa_data_azimuth_astro_get, _spa.spa_data_azimuth_astro_set)
    __swig_setmethods__["azimuth"] = _spa.spa_data_azimuth_set
    __swig_getmethods__["azimuth"] = _spa.spa_data_azimuth_get
    if _newclass:
        azimuth = _swig_property(_spa.spa_data_azimuth_get, _spa.spa_data_azimuth_set)
    __swig_setmethods__["incidence"] = _spa.spa_data_incidence_set
    __swig_getmethods__["incidence"] = _spa.spa_data_incidence_get
    if _newclass:
        incidence = _swig_property(_spa.spa_data_incidence_get, _spa.spa_data_incidence_set)
    __swig_setmethods__["suntransit"] = _spa.spa_data_suntransit_set
    __swig_getmethods__["suntransit"] = _spa.spa_data_suntransit_get
    if _newclass:
        suntransit = _swig_property(_spa.spa_data_suntransit_get, _spa.spa_data_suntransit_set)
    __swig_setmethods__["sunrise"] = _spa.spa_data_sunrise_set
    __swig_getmethods__["sunrise"] = _spa.spa_data_sunrise_get
    if _newclass:
        sunrise = _swig_property(_spa.spa_data_sunrise_get, _spa.spa_data_sunrise_set)
    __swig_setmethods__["sunset"] = _spa.spa_data_sunset_set
    __swig_getmethods__["sunset"] = _spa.spa_data_sunset_get
    if _newclass:
        sunset = _swig_property(_spa.spa_data_sunset_get, _spa.spa_data_sunset_set)

    def __init__(self):
        this = _spa.new_spa_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spa.delete_spa_data
    __del__ = lambda self: None
spa_data_swigregister = _spa.spa_data_swigregister
spa_data_swigregister(spa_data)


def deg2rad(degrees):
    return _spa.deg2rad(degrees)
deg2rad = _spa.deg2rad

def rad2deg(radians):
    return _spa.rad2deg(radians)
rad2deg = _spa.rad2deg

def limit_degrees(degrees):
    return _spa.limit_degrees(degrees)
limit_degrees = _spa.limit_degrees

def third_order_polynomial(a, b, c, d, x):
    return _spa.third_order_polynomial(a, b, c, d, x)
third_order_polynomial = _spa.third_order_polynomial

def geocentric_right_ascension(lamda, epsilon, beta):
    return _spa.geocentric_right_ascension(lamda, epsilon, beta)
geocentric_right_ascension = _spa.geocentric_right_ascension

def geocentric_declination(beta, epsilon, lamda):
    return _spa.geocentric_declination(beta, epsilon, lamda)
geocentric_declination = _spa.geocentric_declination

def observer_hour_angle(nu, longitude, alpha_deg):
    return _spa.observer_hour_angle(nu, longitude, alpha_deg)
observer_hour_angle = _spa.observer_hour_angle

def right_ascension_parallax_and_topocentric_dec(latitude, elevation, xi, h, delta, delta_alpha, delta_prime):
    return _spa.right_ascension_parallax_and_topocentric_dec(latitude, elevation, xi, h, delta, delta_alpha, delta_prime)
right_ascension_parallax_and_topocentric_dec = _spa.right_ascension_parallax_and_topocentric_dec

def topocentric_right_ascension(alpha_deg, delta_alpha):
    return _spa.topocentric_right_ascension(alpha_deg, delta_alpha)
topocentric_right_ascension = _spa.topocentric_right_ascension

def topocentric_local_hour_angle(h, delta_alpha):
    return _spa.topocentric_local_hour_angle(h, delta_alpha)
topocentric_local_hour_angle = _spa.topocentric_local_hour_angle

def topocentric_elevation_angle(latitude, delta_prime, h_prime):
    return _spa.topocentric_elevation_angle(latitude, delta_prime, h_prime)
topocentric_elevation_angle = _spa.topocentric_elevation_angle

def atmospheric_refraction_correction(pressure, temperature, atmos_refract, e0):
    return _spa.atmospheric_refraction_correction(pressure, temperature, atmos_refract, e0)
atmospheric_refraction_correction = _spa.atmospheric_refraction_correction

def topocentric_elevation_angle_corrected(e0, delta_e):
    return _spa.topocentric_elevation_angle_corrected(e0, delta_e)
topocentric_elevation_angle_corrected = _spa.topocentric_elevation_angle_corrected

def topocentric_zenith_angle(e):
    return _spa.topocentric_zenith_angle(e)
topocentric_zenith_angle = _spa.topocentric_zenith_angle

def topocentric_azimuth_angle_astro(h_prime, latitude, delta_prime):
    return _spa.topocentric_azimuth_angle_astro(h_prime, latitude, delta_prime)
topocentric_azimuth_angle_astro = _spa.topocentric_azimuth_angle_astro

def topocentric_azimuth_angle(azimuth_astro):
    return _spa.topocentric_azimuth_angle(azimuth_astro)
topocentric_azimuth_angle = _spa.topocentric_azimuth_angle

def spa_calculate(spa):
    return _spa.spa_calculate(spa)
spa_calculate = _spa.spa_calculate
# This file is compatible with both classic and new-style classes.


